{"ast":null,"code":"var _jsxFileName = \"/Users/paulo/Desktop/OPEN FULL STACK/part1/1.3 to 1.5/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = ({\n  text,\n  handleClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => handleClick(text),\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Button;\n\nconst Results = ({\n  good,\n  neutral,\n  bad,\n  clicks,\n  scores\n}) => {\n  let average = scores / clicks;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Good \", good]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Neutral \", neutral]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Bad \", bad]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total \", clicks]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Average \", average, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = Results;\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [clicks, setClicks] = useState(0);\n  const [scores, setScores] = useState(0);\n\n  const handleClick = feedback => {\n    if (feedback === 'good') {\n      console.log(feedback);\n      setGood(good + 1);\n      setClicks(clicks + 1);\n      setScores(scores + 1);\n    }\n\n    if (feedback === 'neutral') {\n      console.log('neutral');\n      setNeutral(neutral + 1);\n      setClicks(clicks + 1);\n    }\n\n    if (feedback === 'bad') {\n      console.log('bad before');\n      setBad(bad + 1);\n      setClicks(clicks + 1);\n      setScores(scores - 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"good\",\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"neutral\",\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"bad\",\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Results, {\n      good: good,\n      neutral: neutral,\n      bad: bad,\n      clicks: clicks,\n      scores: scores\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 3\n  }, this);\n};\n\n_s(App, \"Dp/NIwWe0r1FjSKhJOLh+hOFxxM=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Results\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/paulo/Desktop/OPEN FULL STACK/part1/1.3 to 1.5/src/App.js"],"names":["React","useState","Button","text","handleClick","Results","good","neutral","bad","clicks","scores","average","App","setGood","setNeutral","setBad","setClicks","setScores","feedback","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst Button = ({ text, handleClick }) => {\n\treturn <button onClick={() => handleClick(text)}>{text}</button>\n}\n\nconst Results = ({ good, neutral, bad, clicks, scores }) => {\n\tlet average = scores / clicks\n\treturn (\n\t\t<div>\n\t\t\t<p>Good {good}</p>\n\t\t\t<p>Neutral {neutral}</p>\n\t\t\t<p>Bad {bad}</p>\n\t\t\t<p>Total {clicks}</p>\n\t\t\t<p>Average {average} </p>\n\t\t</div>\n\t)\n}\n\nconst App = () => {\n\t// save clicks of each button to its own state\n\tconst [good, setGood] = useState(0)\n\tconst [neutral, setNeutral] = useState(0)\n\tconst [bad, setBad] = useState(0)\n\tconst [clicks, setClicks] = useState(0)\n\tconst [scores, setScores] = useState(0)\n\n\tconst handleClick = feedback => {\n\t\tif (feedback === 'good') {\n\t\t\tconsole.log(feedback)\n\t\t\tsetGood(good + 1)\n\t\t\tsetClicks(clicks + 1)\n\t\t\tsetScores(scores + 1)\n\t\t}\n\t\tif (feedback === 'neutral') {\n\t\t\tconsole.log('neutral')\n\t\t\tsetNeutral(neutral + 1)\n\t\t\tsetClicks(clicks + 1)\n\t\t}\n\t\tif (feedback === 'bad') {\n\t\t\tconsole.log('bad before')\n\t\t\tsetBad(bad + 1)\n\t\t\tsetClicks(clicks + 1)\n\t\t\tsetScores(scores - 1)\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>give feedback</h1>\n\t\t\t<Button text=\"good\" handleClick={handleClick} />\n\t\t\t<Button text=\"neutral\" handleClick={handleClick} />\n\t\t\t<Button text=\"bad\" handleClick={handleClick} />\n\t\t\t<Results\n\t\t\t\tgood={good}\n\t\t\t\tneutral={neutral}\n\t\t\t\tbad={bad}\n\t\t\t\tclicks={clicks}\n\t\t\t\tscores={scores}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}